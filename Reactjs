Perfect! Hereâ€™s a 50-day day-wise roadmap for React.js with detailed syllabus and sub-syllabus (suitable after you finish JavaScript basics).

This will take you from beginner â†’ confident React developer step by step.


---

ðŸ“… 50-Day React.js Learning Roadmap


---

Phase 1: React Fundamentals (Day 1â€“10)

Focus on setup, JSX, components, and props.

Day	Topics	Sub-Topics

Day 1	Introduction to React	What is React, SPA concept, Virtual DOM, Component-based architecture
Day 2	Setup	Install Node.js, create-react-app / Vite, Project structure
Day 3	JSX Basics	What is JSX, Embedding expressions, Rules of JSX
Day 4	Components â€“ Basics	Functional components, Component naming, Returning JSX
Day 5	Components â€“ Props	Passing data with props, props.children, Reusing components
Day 6	Components â€“ Practice	Build simple reusable Card component
Day 7	Styling Components	CSS in React (CSS files, inline styles, CSS Modules)
Day 8	Conditional Rendering	if/else, Ternary operators, && short-circuit
Day 9	Lists & Keys	Rendering lists with .map(), key prop importance
Day 10	Small Project	Build a basic Profile Card list using props & map



---

Phase 2: State & Events (Day 11â€“20)

Learn how React handles data and user interactions.

Day	Topics	Sub-Topics

Day 11	useState Hook	Declaring state, Updating state
Day 12	Event Handling	onClick, onChange, Event object
Day 13	Handling Forms	Controlled components, Input fields
Day 14	Two-Way Binding	Sync state with inputs
Day 15	Derived State	Calculating values from state
Day 16	Lifting State Up	Sharing state between components
Day 17	Component Re-rendering	How state triggers re-render, Reactâ€™s rendering behavior
Day 18	useEffect Hook â€“ Basics	Side effects, component lifecycle concept
Day 19	useEffect Hook â€“ Advanced	Dependency array, Cleanup functions
Day 20	Mini Project	Build a Counter App or Simple Task Tracker



---

Phase 3: Intermediate React (Day 21â€“30)

Work with more complex concepts and reusable patterns.

Day	Topics	Sub-Topics

Day 21	Multiple States	Managing multiple states in a component
Day 22	useRef Hook	Accessing DOM elements, Storing mutable values
Day 23	Conditional Styling	Dynamic class names, Inline style conditions
Day 24	React Fragment & Portals	<> </>, Creating modals with portals
Day 25	Lists â€“ Advanced	Optimizing list rendering, key uniqueness
Day 26	Component Composition	Reusing UI patterns, children as props
Day 27	Props Drilling Problem	Identifying deeply nested prop passing issue
Day 28	Context API	CreateContext, Provider, useContext
Day 29	Context API â€“ Practice	Convert prop drilling example into context
Day 30	Mini Project	Theme Switcher or Login/Logout simulation using Context



---

Phase 4: React Router & Data Fetching (Day 31â€“40)

Learn navigation and working with APIs.

Day	Topics	Sub-Topics

Day 31	React Router â€“ Setup	Install React Router, BrowserRouter, Routes
Day 32	Routing Basics	Route, Link, NavLink, Switch
Day 33	Dynamic Routing	URL params, useParams hook
Day 34	Nested Routing	Nested routes and layouts
Day 35	Navigation Programmatically	useNavigate hook
Day 36	Fetching Data â€“ fetch	Display data from public APIs
Day 37	Fetching Data â€“ axios	Install axios, async/await calls
Day 38	Loading & Error States	Show loading spinner, handle errors
Day 39	Data Fetching â€“ useEffect	Best practices, dependency arrays
Day 40	Project	Build a Movie Search / Weather App using API + Router



---

Phase 5: Advanced React & Projects (Day 41â€“50)

Learn performance optimization, hooks, and build final projects.

Day	Topics	Sub-Topics

Day 41	Performance Optimization	React.memo, useCallback, useMemo
Day 42	Custom Hooks	Creating and reusing custom hooks
Day 43	Error Boundaries	Catching UI errors
Day 44	PropTypes & Type Checking	Adding PropTypes for components
Day 45	Lazy Loading	React.lazy, Suspense
Day 46	State Management Intro	Why Redux or Zustand
Day 47	Redux â€“ Basics	Store, Reducers, Actions
Day 48	Redux â€“ Hooks	useSelector, useDispatch
Day 49	Final Project â€“ 1	Build a Full CRUD App (e.g. Notes or Expense Tracker)
Day 50	Final Project â€“ 2 + Revision	Add routing, state management, final polish



---

This plan covers React from beginner to production-ready developer.


---

Would you like me to combine JavaScript + React roadmap into one printable PDF (with checkboxes and progress tracker) so you can follow a full 100-day roadmap?



#####
# 50-Day React.js Learning Roadmap

This 50-day roadmap is designed for learners with basic JavaScript, HTML, and CSS knowledge aiming to master React.js, a popular front-end library for building user interfaces. Each day covers a **main topic** with a **detailed sub-syllabus** (key concepts, examples, and practice ideas). Dedicate 2-4 hours daily: 1 hour theory (use React docs, freeCodeCamp, or Scrimba), 1-2 hours coding practice (use CodeSandbox or local setup with Vite/Create React App), and review previous days. Build small projects weekly to reinforce learning. Prerequisites: Solid JavaScript (ES6+), including arrays, objects, async/await, and DOM basics.

## Week 1: Foundations and Setup (Days 1-7)
Focus: React basics and environment setup.

### Day 1: Introduction to React
- What is React? Library vs framework, component-based architecture.
- Key concepts: Virtual DOM, JSX, one-way data flow.
- Setup: Node.js, npm, Create React App (CRA) or Vite.
- Practice: Create a "Hello World" React app using Vite.

### Day 2: JSX and Components
- JSX syntax: HTML-like in JavaScript, expressions `{}`.
- Functional components: `function MyComponent() { return <div>Hello</div> }`.
- Props: Passing data to components.
- Practice: Build a static "Profile Card" component with props (name, age).

### Day 3: Project Structure and Tools
- Folder structure: `src`, `components`, `App.jsx`.
- CSS in React: Inline styles, CSS modules, `className`.
- Tools: VS Code, ESLint, Prettier for linting/formatting.
- Practice: Style the Profile Card with CSS module.

### Day 4: Lists and Keys
- Rendering lists: `map()` for arrays.
- Keys: Unique identifiers for list items.
- Conditional rendering: `&&`, ternary, early returns.
- Practice: Render a list of todos with unique keys.

### Day 5: Handling Events
- Event handlers: `onClick`, `onChange`, `onSubmit`.
- Binding `this` in class components (brief intro).
- Passing arguments to handlers: Inline arrow functions.
- Practice: Add a button to toggle visibility of Profile Card.

### Day 6: State Basics with useState
- `useState` hook: Declaring state, updating with setter.
- State vs props: Mutability and single source of truth.
- Updating objects/arrays: Spread operator, immutability.
- Practice: Create a counter component with increment/decrement.

### Day 7: Review and Mini-Project
- Review Days 1-6: Quiz on JSX, props, state.
- Mini-Project: "Todo List" with static todos, add/delete buttons, and basic styling.
- Resources: React.dev for official docs.

## Week 2: Intermediate React (Days 8-14)
Focus: State management and component patterns.

### Day 8: Forms in React
- Controlled components: Binding inputs to state.
- Handling forms: `onSubmit`, form validation.
- Multiple inputs: Name attribute, single handler.
- Practice: Build a form to add todos to the list.

### Day 9: useEffect Hook
- Lifecycle basics: Mount, update, unmount.
- `useEffect`: Syntax, dependency array.
- Cleanup: Returning a function in `useEffect`.
- Practice: Fetch and display todos from JSONPlaceholder API on mount.

### Day 10: Component Composition
- Children prop: `<Parent><Child /></Parent>`.
- Prop drilling: Passing data through components.
- Reusable components: Patterns like wrapper components.
- Practice: Create a reusable Button and Card component.

### Day 11: Conditional Rendering Advanced
- Render patterns: Null, fragments (`<>...</>`), arrays.
- Loading states: Show spinner during async calls.
- Error boundaries (intro): Try-catch in rendering.
- Practice: Add loading state to todo fetch.

### Day 12: State Management Patterns
- Lifting state up: Managing state in parent components.
- State colocation: Keeping state close to usage.
- `useReducer` intro: For complex state logic.
- Practice: Refactor todo list to use `useReducer`.

### Day 13: React Router Basics
- Setup: Install `react-router-dom`, basic routes.
- Components: `<BrowserRouter>`, `<Route>`, `<Link>`.
- URL params: `useParams()` for dynamic routes.
- Practice: Add routes for Home and Todo pages.

### Day 14: Review and Mini-Project
- Review Days 8-13: Debug a form and router setup.
- Mini-Project: "Shopping List" app with form to add items, routes for categories, and API fetch.
- Resources: React Router docs, Egghead.io React courses.

## Week 3: Advanced Hooks and Context (Days 15-21)
Focus: Hooks and global state.

### Day 15: Custom Hooks
- Creating hooks: `function useCustom() {}`.
- Reusing logic: Extract stateful logic from components.
- Rules of hooks: Only call at top level, only in components/hooks.
- Practice: Create `useFetch` hook for API calls.

### Day 16: useRef and useMemo
- `useRef`: Persisting values, DOM references.
- `useMemo`: Memoizing expensive calculations.
- Performance optimization basics.
- Practice: Use `useRef` for input focus; memoize a sorted list.

### Day 17: useCallback and useEffect Cleanup
- `useCallback`: Memoizing functions.
- Advanced `useEffect`: Handling async cleanup (e.g., abort fetch).
- Dependencies: Avoiding infinite loops.
- Practice: Optimize a search filter with `useCallback`.

### Day 18: Context API
- Creating context: `React.createContext()`.
- Provider/Consumer: `useContext` hook.
- Use cases: Theme, auth, global state.
- Practice: Add dark/light theme toggle with Context.

### Day 19: Context with useReducer
- Combining `useReducer` with Context.
- Dispatching actions globally.
- Replacing prop drilling with Context.
- Practice: Manage todo state in Context with `useReducer`.

### Day 20: Error Boundaries
- Class-based error boundaries: `componentDidCatch`.
- Wrapping components to catch errors.
- Fallback UI for errors.
- Practice: Add error boundary to todo list for API failures.

### Day 21: Review and Mini-Project
- Review Days 15-20: Refactor code with custom hooks.
- Mini-Project: "Movie Search App" using Context, custom hooks, and API (e.g., OMDB API).
- Resources: Kent C. Doddsâ€™ blog for hooks.

## Week 4: Styling and Performance (Days 22-28)
Focus: UI and optimization.

### Day 22: Advanced Styling
- Styled-components: Install, create styled components.
- CSS-in-JS vs CSS modules vs Tailwind CSS.
- Dynamic styles: Props in styled-components.
- Practice: Style the Movie app with styled-components.

### Day 23: React Performance Optimization
- Avoiding re-renders: `React.memo`.
- `useMemo` and `useCallback` revisited.
- Lazy loading components: `React.lazy`, `Suspense`.
- Practice: Lazy-load a MovieDetails component.

### Day 24: React Router Advanced
- Nested routes: `<Outlet>` for layouts.
- `useNavigate`, `useLocation` for navigation.
- Protected routes: Basic auth logic.
- Practice: Add nested routes and protected route for admin.

### Day 25: Forms with Formik
- Setup: Install Formik, basic form setup.
- Validation: Yup integration for schemas.
- Formik hooks: `useFormik`, `useField`.
- Practice: Refactor todo form with Formik and Yup.

### Day 26: State Management with Redux (Intro)
- Setup: Install `redux`, `react-redux`, `@redux/toolkit`.
- Store, slices, actions, reducers.
- `useSelector`, `useDispatch` for state access.
- Practice: Manage todos with Redux Toolkit slice.

### Day 27: Testing React Components
- Setup: Jest, React Testing Library.
- Testing components: `render`, `screen`, `fireEvent`.
- Mocking APIs: MSW or Jest mocks.
- Practice: Write tests for todo list component.

### Day 28: Review and Mini-Project
- Review Days 22-27: Optimize and test code.
- Mini-Project: "Blog Dashboard" with styled-components, Redux, and routes.
- Resources: Redux Toolkit docs, Testing Library docs.

## Week 5: Advanced React Patterns (Days 29-35)
Focus: Scalable architectures.

### Day 29: Compound Components
- Pattern: Flexible component APIs (e.g., `<Select>` with `<Option>`).
- Context for compound components.
- Practice: Build a reusable Dropdown component.

### Day 30: Render Props
- Render props pattern: Passing render functions.
- vs Hooks: When to use each.
- Practice: Create a MouseTracker component with render props.

### Day 31: Higher-Order Components (HOCs)
- HOC pattern: Wrapping components for reusability.
- Example: `withAuth` for protected components.
- Practice: Create a `withLogger` HOC for console logging.

### Day 32: Portals
- `ReactDOM.createPortal`: Rendering outside DOM hierarchy.
- Use cases: Modals, tooltips.
- Practice: Build a modal component with Portal.

### Day 33: React Query (TanStack Query)
- Setup: Install `@tanstack/react-query`.
- Queries: `useQuery` for fetching.
- Mutations: `useMutation` for updates.
- Practice: Refactor Movie app to use React Query.

### Day 34: Server-Side Rendering (SSR) Intro
- SSR vs CSR: Benefits for SEO/performance.
- Next.js basics: Setup, `pages` directory.
- Static generation vs SSR.
- Practice: Convert Blog app to Next.js with static pages.

### Day 35: Review and Mini-Project
- Review Days 29-34: Combine patterns.
- Mini-Project: "E-Commerce Cart" with compound components, React Query, and Portal modals.
- Resources: Next.js docs, TanStack Query docs.

## Week 6: APIs and Real-World (Days 36-42)
Focus: Backend integration.

### Day 36: Advanced Fetching with Axios
- Setup: Install Axios, basic GET/POST.
- Interceptors: Global error handling, auth headers.
- Practice: Refactor Movie app to use Axios.

### Day 37: Authentication in React
- JWT basics: Storing tokens in localStorage.
- Context for auth state.
- Protected routes revisited.
- Practice: Add login/logout to Blog app.

### Day 38: WebSockets with Socket.IO
- Setup: Install `socket.io-client`.
- Real-time updates: Connect, emit, listen.
- Practice: Add real-time notifications to Blog app.

### Day 39: GraphQL with Apollo Client
- Setup: Install `@apollo/client`, basic queries.
- Mutations: Create/update data.
- Caching basics.
- Practice: Fetch blog posts with Apollo GraphQL.

### Day 40: Accessibility (a11y)
- ARIA attributes, semantic HTML.
- Testing: `axe` tool, screen readers.
- Keyboard navigation: `tabIndex`, focus management.
- Practice: Audit and improve Blog app accessibility.

### Day 41: React with TypeScript (Intro)
- Setup: Add TypeScript to CRA/Vite.
- Typing props, state, hooks.
- Interfaces vs types.
- Practice: Add TypeScript to a component in E-Commerce app.

### Day 42: Review and Mini-Project
- Review Days 36-41: Integrate APIs and TypeScript.
- Mini-Project: "Chat App" with Socket.IO, TypeScript, and auth.
- Resources: Apollo docs, TypeScript handbook.

## Week 7: Deployment and Advanced Topics (Days 43-49)
Focus: Production-ready apps.

### Day 43: Build and Deployment
- Building: `npm run build`, optimizing assets.
- Deployment: Netlify, Vercel, GitHub Pages.
- Environment variables: `.env` files.
- Practice: Deploy Blog app to Vercel.

### Day 44: Performance Monitoring
- React Developer Tools: Profiling components.
- Lighthouse audits: Performance, SEO, a11y.
- Code splitting: `React.lazy` revisited.
- Practice: Optimize E-Commerce app with Lighthouse.

### Day 45: State Machines with XState
- Setup: Install `xstate`, `xstate/react`.
- Finite state machines: States, transitions.
- Practice: Add state machine to manage form states.

### Day 46: React Native Intro
- Setup: Expo for React Native.
- Components: `View`, `Text`, `TouchableOpacity`.
- Differences from React web.
- Practice: Build a simple mobile Todo app.

### Day 47: Micro-Frontends (Intro)
- Concept: Splitting apps into micro-frontends.
- Module federation: Webpack 5 basics.
- Practice: Create two React apps sharing a component.

### Day 48: CI/CD for React
- Setup: GitHub Actions for testing/deployment.
- Automated tests: Jest in CI.
- Practice: Add CI pipeline for Blog app.

### Day 49: Review and Capstone Project Planning
- Review Days 43-48: Optimize and deploy.
- Capstone Planning: Outline a full app (e.g., Social Media Dashboard).
- Resources: Vercel docs, XState docs.

## Day 50: Capstone Project and Next Steps
- Build: Complete a "Social Media Dashboard" with API, auth, real-time updates, and TypeScript.
- Deploy: Use Vercel or Netlify.
- Next Steps: Learn Next.js deeper, explore Remix, or backend with Node.js. Join communities (Reactiflux Discord).
- Reflection: Add projects to portfolio, revisit weak areas.

**Notes**:
- Current date: September 18, 2025.
- Tools: Use React.dev, MDN, and freeCodeCamp for reference.
- Practice daily on CodeSandbox or local setup.
- Review weekly to solidify concepts.
