Java Constructors Explained

Constructors are special methods in Java that are used to initialize objects when they are created. Let me explain the full concept with examples.

Basic Constructor Example

```java
public class Car {
    private String brand;
    private int year;
    
    // Default constructor (no parameters)
    public Car() {
        this.brand = "Unknown";
        this.year = 2023;
    }
    
    // Parameterized constructor
    public Car(String brand, int year) {
        this.brand = brand;
        this.year = year;
    }
    
    public void displayInfo() {
        System.out.println("Brand: " + brand + ", Year: " + year);
    }
    
    public static void main(String[] args) {
        // Using default constructor
        Car car1 = new Car();
        car1.displayInfo();
        
        // Using parameterized constructor
        Car car2 = new Car("Toyota", 2022);
        car2.displayInfo();
    }
}
```

Key Concepts of Constructors

1. Constructor Basics

路 Constructors have the same name as the class
路 They don't have a return type (not even void)
路 They are called automatically when an object is created with the new keyword
路 If no constructor is defined, Java provides a default constructor

2. Types of Constructors

```java
public class Student {
    private String name;
    private int id;
    
    // 1. Default constructor (no-args)
    public Student() {
        this.name = "Unknown";
        this.id = 0;
    }
    
    // 2. Parameterized constructor
    public Student(String name, int id) {
        this.name = name;
        this.id = id;
    }
    
    // 3. Copy constructor (creates a copy of another object)
    public Student(Student other) {
        this.name = other.name;
        this.id = other.id;
    }
    
    public void display() {
        System.out.println("ID: " + id + ", Name: " + name);
    }
    
    public static void main(String[] args) {
        Student s1 = new Student();           // Default constructor
        Student s2 = new Student("Alice", 101); // Parameterized
        Student s3 = new Student(s2);         // Copy constructor
        
        s1.display();
        s2.display();
        s3.display();
    }
}
```

3. Constructor Overloading

```java
public class Rectangle {
    private int length;
    private int width;
    
    // Constructor with no parameters
    public Rectangle() {
        this.length = 1;
        this.width = 1;
    }
    
    // Constructor with one parameter (square)
    public Rectangle(int side) {
        this.length = side;
        this.width = side;
    }
    
    // Constructor with two parameters
    public Rectangle(int length, int width) {
        this.length = length;
        this.width = width;
    }
    
    public int getArea() {
        return length * width;
    }
    
    public static void main(String[] args) {
        Rectangle rect1 = new Rectangle();    // 1x1 rectangle
        Rectangle square = new Rectangle(5);  // 5x5 square
        Rectangle rect2 = new Rectangle(4, 6); // 4x6 rectangle
        
        System.out.println("Area 1: " + rect1.getArea());
        System.out.println("Area 2: " + square.getArea());
        System.out.println("Area 3: " + rect2.getArea());
    }
}
```

4. Constructor Chaining

```java
public class Person {
    private String name;
    private int age;
    private String address;
    
    // Constructor 1
    public Person() {
        this("Unknown"); // Calls constructor 2
    }
    
    // Constructor 2
    public Person(String name) {
        this(name, 0); // Calls constructor 3
    }
    
    // Constructor 3
    public Person(String name, int age) {
        this(name, age, "Not specified"); // Calls constructor 4
    }
    
    // Constructor 4 (main constructor)
    public Person(String name, int age, String address) {
        this.name = name;
        this.age = age;
        this.address = address;
    }
    
    public void display() {
        System.out.println("Name: " + name + ", Age: " + age + ", Address: " + address);
    }
    
    public static void main(String[] args) {
        Person p1 = new Person();
        Person p2 = new Person("Alice");
        Person p3 = new Person("Bob", 25);
        Person p4 = new Person("Charlie", 30, "123 Main St");
        
        p1.display();
        p2.display();
        p3.display();
        p4.display();
    }
}
```

5. Private Constructors and Singleton Pattern

```java
public class DatabaseConnection {
    private static DatabaseConnection instance;
    
    // Private constructor to prevent instantiation
    private DatabaseConnection() {
        System.out.println("Database connection established");
    }
    
    // Public method to provide access to the single instance
    public static DatabaseConnection getInstance() {
        if (instance == null) {
            instance = new DatabaseConnection();
        }
        return instance;
    }
    
    public void query(String sql) {
        System.out.println("Executing query: " + sql);
    }
    
    public static void main(String[] args) {
        // This would cause a compilation error:
        // DatabaseConnection conn = new DatabaseConnection();
        
        // Correct way to get an instance
        DatabaseConnection conn1 = DatabaseConnection.getInstance();
        DatabaseConnection conn2 = DatabaseConnection.getInstance();
        
        conn1.query("SELECT * FROM users");
        conn2.query("INSERT INTO logs VALUES ('test')");
        
        // Both references point to the same object
        System.out.println("Are they the same instance? " + (conn1 == conn2));
    }
}
```

Key Points to Remember

1. Name: Constructor name must exactly match the class name
2. No return type: Constructors don't have a return type (not even void)
3. Automatic call: Constructors are automatically invoked when an object is created
4. Default constructor: If no constructor is defined, Java provides a default no-argument constructor
5. Overloading: You can have multiple constructors with different parameters
6. Chaining: One constructor can call another using this()
7. No inheritance: Constructors are not inherited by subclasses
8. Access modifiers: Constructors can have access modifiers (public, private, protected)

Constructors are fundamental to object-oriented programming in Java as they ensure that objects are properly initialized before they are used.
