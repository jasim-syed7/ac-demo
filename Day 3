### Detailed Explanation of Day 3: Creating Tables

**Objective**: Master the creation and management of tables in Microsoft SQL Server (MSSQL), a core component of relational databases. By the end of Day 3, you’ll be proficient in using the `CREATE TABLE` syntax, applying essential constraints like `PRIMARY KEY`, `NOT NULL`, and `UNIQUE`, modifying tables with `ALTER TABLE`, and inserting sample data with `INSERT INTO`. This day builds on your Day 2 knowledge of databases, schemas, and data types, enabling you to structure data effectively.

**Duration**: 4-6 hours (split into theory, hands-on practice, and review). Adjust based on your familiarity with SQL Server Management Studio (SSMS) and comfort with SQL syntax.

---

### Sub-Syllabus Breakdown
1. **CREATE TABLE Syntax** (1-1.5 hours)
   - Learn the syntax and best practices for creating tables in SQL Server.
   - Understand how to define columns, data types, and basic table structure.
2. **Constraints (PRIMARY KEY, NOT NULL, UNIQUE)** (1-1.5 hours)
   - Study key constraints to enforce data integrity and uniqueness.
   - Explore how constraints shape table behavior and data reliability.
3. **ALTER TABLE for Modifications** (1 hour)
   - Learn to modify existing tables by adding, altering, or dropping columns and constraints.
   - Understand when and why to modify table structures.
4. **Insert Sample Data Using INSERT INTO** (1-1.5 hours)
   - Master the `INSERT INTO` statement to populate tables with data.
   - Practice inserting single and multiple rows and handle common errors.

---

### Step-by-Step Detailed Plan for Day 3

#### 1. CREATE TABLE Syntax (1-1.5 hours)
**Goal**: Understand how to create tables with proper column definitions and data types, ensuring a solid foundation for data storage.

**Theory (45-60 minutes)**:
- **What is a Table?**
  - A table is the primary structure for storing data in a relational database, consisting of rows (records) and columns (fields).
  - Each column has a specific data type (e.g., `INT`, `VARCHAR`, `DATE`) to enforce data consistency.
  - Tables reside within a schema (e.g., `dbo`, `Sales`) in a database.
- **CREATE TABLE Syntax**:
  - Basic syntax:
    ```sql
    CREATE TABLE [SchemaName].[TableName] (
        Column1 DataType [Constraints],
        Column2 DataType [Constraints],
        ...
    );
    ```
  - Example:
    ```sql
    CREATE TABLE Sales.Customers (
        CustomerID INT,
        FirstName VARCHAR(50),
        Email VARCHAR(100)
    );
    ```
  - Key components:
    - **SchemaName**: Optional; defaults to `dbo` if omitted (e.g., `dbo.Customers`).
    - **TableName**: Unique within the schema; use meaningful names (e.g., `Orders`, not `Table1`).
    - **Column Definitions**: Specify column name, data type, and optional constraints.
  - Optional clauses:
    - `ON [filegroup]`: Specifies storage location (rare for beginners; use default).
    - `COLLATE`: Defines sorting rules for text (e.g., case-sensitive collation).
- **Best Practices**:
  - Use singular nouns for table names (e.g., `Customer`, not `Customers`) for consistency.
  - Choose descriptive column names (e.g., `OrderDate` vs. `Date`).
  - Specify data types carefully (review Day 2: e.g., `VARCHAR(50)` for names, `DECIMAL(10,2)` for prices).
  - Place tables in appropriate schemas for organization (e.g., `Sales.Orders`).
- **Common Pitfalls**:
  - Duplicate table names in the same schema cause errors.
  - Invalid data types or syntax errors (e.g., missing commas) fail execution.
  - Large VARCHAR lengths (e.g., `VARCHAR(MAX)`) waste space if unnecessary.
- **SSMS Tools**:
  - Use Object Explorer to create tables via GUI (right-click Tables > New Table), but prefer SQL for learning.
  - View table structure: Right-click table > Script Table as > CREATE To > New Query Editor Window.

**Practice (30-45 minutes)**:
- **Activity 1: Write CREATE TABLE Statements**:
  - In your journal, write the `CREATE TABLE` syntax and create examples for:
    - A `Products` table with columns: `ProductID` (INT), `ProductName` (VARCHAR(100)), `Price` (DECIMAL(10,2)).
    - An `Employees` table with columns: `EmployeeID` (INT), `FullName` (NVARCHAR(50)), `HireDate` (DATE).
  - Example:
    ```sql
    CREATE TABLE Products (
        ProductID INT,
        ProductName VARCHAR(100),
        Price DECIMAL(10,2)
    );
    ```
- **Activity 2: Create a Table in SSMS**:
  - Open SSMS, connect to your instance (e.g., `.\SQLEXPRESS`).
  - Create a database: `CREATE DATABASE StoreDB; USE StoreDB;`
  - Create a schema: `CREATE SCHEMA Inventory;`
  - Run:
    ```sql
    CREATE TABLE Inventory.Items (
        ItemID INT,
        ItemName VARCHAR(100),
        StockQuantity INT,
        UnitPrice DECIMAL(8,2)
    );
    ```
  - Verify: In Object Explorer, expand `StoreDB > Schemas > Inventory > Tables > Items`.
- **Activity 3: Explore Table Creation**:
  - Create another table in `dbo` schema (e.g., `dbo.Suppliers` with `SupplierID` (INT), `SupplierName` (VARCHAR(50)), `ContactEmail` (VARCHAR(100))).
  - Run: `SELECT * FROM sys.tables WHERE schema_id = SCHEMA_ID('Inventory');` to list tables in the `Inventory` schema.
- **Activity 4: Experiment**:
  - Try creating a table with a typo (e.g., `VARCHR` instead of `VARCHAR`) and note the error.
  - Fix the error and recreate the table.

**Resources**:
- Microsoft Docs: “CREATE TABLE (Transact-SQL)” (search “SQL Server CREATE TABLE”).
- W3Schools: SQL CREATE TABLE tutorial.
- YouTube: Search “SQL Server create table tutorial” for visual guidance.

---

#### 2. Constraints (PRIMARY KEY, NOT NULL, UNIQUE) (1-1.5 hours)
**Goal**: Learn how to enforce data integrity using constraints, ensuring tables store valid and unique data.

**Theory (45-60 minutes)**:
- **What are Constraints?**
  - Constraints are rules applied to columns to enforce data integrity and consistency.
  - They prevent invalid data entry and maintain relationships between tables.
- **Key Constraints**:
  - **PRIMARY KEY**:
    - Ensures each row in a table is uniquely identifiable.
    - Characteristics:
      - Unique: No duplicate values.
      - Not NULL: Cannot be empty.
      - Only one PRIMARY KEY per table (can include multiple columns, called a composite key).
    - Example:
      ```sql
      CREATE TABLE Sales.Orders (
          OrderID INT PRIMARY KEY,
          OrderDate DATE
      );
      ```
    - Effect: `OrderID` must be unique and non-NULL.
  - **NOT NULL**:
    - Requires a column to have a value (cannot be NULL).
    - Example:
      ```sql
      CREATE TABLE Employees (
          EmployeeID INT,
          LastName VARCHAR(50) NOT NULL
      );
      ```
    - Effect: `LastName` must always have a value.
  - **UNIQUE**:
    - Ensures all values in a column (or combination of columns) are unique.
    - Unlike PRIMARY KEY, allows NULLs (except one NULL for single-column UNIQUE).
    - Example:
      ```sql
      CREATE TABLE Customers (
          CustomerID INT PRIMARY KEY,
          Email VARCHAR(100) UNIQUE
      );
      ```
    - Effect: No two customers can have the same `Email`.
- **Other Constraints (Intro)**:
  - **FOREIGN KEY**: Links tables (covered later in the roadmap).
  - **CHECK**: Ensures values meet a condition (e.g., `CHECK (Age >= 18)`).
  - **DEFAULT**: Sets a default value if none provided (e.g., `DEFAULT GETDATE()`).
- **Best Practices**:
  - Always include a PRIMARY KEY for unique row identification.
  - Use NOT NULL for mandatory fields (e.g., names, IDs).
  - Apply UNIQUE for fields like email or username to avoid duplicates.
  - Name constraints explicitly for clarity (e.g., `CONSTRAINT PK_CustomerID PRIMARY KEY (CustomerID)`).
- **Common Pitfalls**:
  - Forgetting PRIMARY KEY leads to non-unique rows.
  - Overusing NOT NULL can make data entry rigid (e.g., optional fields like `MiddleName`).
  - Duplicate UNIQUE values cause insertion errors.
- **SSMS Tools**:
  - View constraints: Right-click table in Object Explorer > Design > Constraints.
  - Script constraints: Right-click table > Script Table as > CREATE To.

**Practice (30-45 minutes)**:
- **Activity 1: Write Constraint Examples**:
  - In your journal, write `CREATE TABLE` statements for:
    - A `Students` table with `StudentID` (INT, PRIMARY KEY), `Name` (VARCHAR(50), NOT NULL), `StudentCode` (VARCHAR(10), UNIQUE).
    - A `Products` table with `ProductID` (INT, PRIMARY KEY), `ProductName` (VARCHAR(100), NOT NULL), `SKU` (VARCHAR(20), UNIQUE).
- **Activity 2: Create Tables with Constraints**:
  - In SSMS, use `StoreDB` (from Activity 2 above).
  - Run:
    ```sql
    CREATE TABLE Inventory.Categories (
        CategoryID INT PRIMARY KEY,
        CategoryName VARCHAR(50) NOT NULL,
        CategoryCode VARCHAR(10) UNIQUE
    );
    ```
  - Verify: Right-click `Categories` in Object Explorer > Design to see constraints.
- **Activity 3: Test Constraints**:
  - Try inserting duplicate `CategoryCode` values (should fail).
  - Try inserting NULL into `CategoryName` (should fail).
  - Example:
    ```sql
    INSERT INTO Inventory.Categories (CategoryID, CategoryName, CategoryCode)
    VALUES (1, 'Electronics', 'ELEC1');
    -- This should fail:
    INSERT INTO Inventory.Categories (CategoryID, CategoryName, CategoryCode)
    VALUES (2, 'Books', 'ELEC1'); -- Duplicate CategoryCode
    ```
- **Activity 4: Named Constraints**:
  - Create a table with explicit constraint names:
    ```sql
    CREATE TABLE Inventory.Suppliers (
        SupplierID INT CONSTRAINT PK_SupplierID PRIMARY KEY,
        SupplierName VARCHAR(50) CONSTRAINT NN_SupplierName NOT NULL,
        ContactEmail VARCHAR(100) CONSTRAINT UQ_ContactEmail UNIQUE
    );
    ```
  - Verify: Run `SELECT * FROM sys.key_constraints WHERE parent_object_id = OBJECT_ID('Inventory.Suppliers');`.

**Resources**:
- Microsoft Docs: “PRIMARY KEY Constraints” and “UNIQUE Constraints”.
- SQLZoo: Interactive constraint exercises.
- Stack Overflow: Search “SQL Server constraints” for common issues.

---

#### 3. ALTER TABLE for Modifications (1 hour)
**Goal**: Learn to modify existing table structures using `ALTER TABLE` to adapt to changing requirements.

**Theory (30 minutes)**:
- **Why Modify Tables?**
  - Requirements evolve (e.g., add a new column like `PhoneNumber`).
  - Fix design errors (e.g., change `VARCHAR(50)` to `VARCHAR(100)`).
  - Add or remove constraints for flexibility or enforcement.
- **ALTER TABLE Syntax**:
  - Basic syntax:
    ```sql
    ALTER TABLE [SchemaName].[TableName]
    [ADD | ALTER COLUMN | DROP COLUMN | ADD CONSTRAINT | DROP CONSTRAINT] ...;
    ```
  - Common operations:
    - **Add Column**: `ALTER TABLE TableName ADD ColumnName DataType;`
      - Example: `ALTER TABLE Customers ADD Phone VARCHAR(15);`
    - **Modify Column**: `ALTER TABLE TableName ALTER COLUMN ColumnName NewDataType;`
      - Example: `ALTER TABLE Customers ALTER COLUMN Email VARCHAR(200);`
    - **Drop Column**: `ALTER TABLE TableName DROP COLUMN ColumnName;`
      - Example: `ALTER TABLE Customers DROP COLUMN Phone;`
    - **Add Constraint**: `ALTER TABLE TableName ADD CONSTRAINT ConstraintName ConstraintType;`
      - Example: `ALTER TABLE Customers ADD CONSTRAINT UQ_Email UNIQUE (Email);`
    - **Drop Constraint**: `ALTER TABLE TableName DROP CONSTRAINT ConstraintName;`
      - Example: `ALTER TABLE Customers DROP CONSTRAINT UQ_Email;`
- **Best Practices**:
  - Test `ALTER TABLE` on a backup database to avoid data loss.
  - Check dependencies (e.g., views or procedures) before dropping columns.
  - Use meaningful constraint names for easy management.
- **Common Pitfalls**:
  - Altering a column with data may fail if data is incompatible (e.g., changing `VARCHAR` to `INT` with non-numeric data).
  - Dropping columns deletes data permanently.
  - Missing constraint names require querying `sys.key_constraints` to find them.
- **SSMS Tools**:
  - Modify tables via GUI: Right-click table > Design.
  - Script changes: Right-click table > Script Table as > ALTER To.

**Practice (30 minutes)**:
- **Activity 1: Write ALTER TABLE Statements**:
  - In your journal, write examples for:
    - Adding a `Description` (VARCHAR(200)) column to `Inventory.Items`.
    - Changing `UnitPrice` to `DECIMAL(10,2)` in `Inventory.Items`.
    - Adding a UNIQUE constraint to `ItemName` in `Inventory.Items`.
- **Activity 2: Modify Tables in SSMS**:
  - Use the `Inventory.Items` table from earlier.
  - Run:
    ```sql
    ALTER TABLE Inventory.Items ADD Description VARCHAR(200);
    ALTER TABLE Inventory.Items ALTER COLUMN UnitPrice DECIMAL(10,2);
    ALTER TABLE Inventory.Items ADD CONSTRAINT UQ_ItemName UNIQUE (ItemName);
    ```
  - Verify: Right-click `Items` > Design to see updated structure.
- **Activity 3: Test Modifications**:
  - Try inserting data that violates the UNIQUE constraint (should fail).
  - Drop a column: `ALTER TABLE Inventory.Items DROP COLUMN Description;`
  - Verify: Query `SELECT * FROM sys.columns WHERE object_id = OBJECT_ID('Inventory.Items');`.
- **Activity 4: Handle Errors**:
  - Try altering `ItemName` to `INT` (should fail if data exists).
  - Resolve by creating a new table for testing.

---

#### 4. Insert Sample Data Using INSERT INTO (1-1.5 hours)
**Goal**: Populate tables with data using `INSERT INTO` and understand how constraints affect data entry.

**Theory (30 minutes)**:
- **INSERT INTO Syntax**:
  - Basic syntax:
    ```sql
    INSERT INTO [SchemaName].[TableName] (Column1, Column2, ...)
    VALUES (Value1, Value2, ...);
    ```
  - Example:
    ```sql
    INSERT INTO Sales.Customers (CustomerID, FirstName, Email)
    VALUES (1, 'Alice Smith', 'alice@example.com');
    ```
  - Multiple rows:
    ```sql
    INSERT INTO Sales.Customers (CustomerID, FirstName, Email)
    VALUES 
        (2, 'Bob Johnson', 'bob@example.com'),
        (3, 'Cathy Lee', 'cathy@example.com');
    ```
  - Insert all columns (order must match table definition):
    ```sql
    INSERT INTO Sales.Customers
    VALUES (4, 'David Wong', 'david@example.com');
    ```
- **Key Points**:
  - Column list is optional if inserting values for all columns in order.
  - Constraints (e.g., NOT NULL, UNIQUE) enforce data validity.
  - Use `GETDATE()` for current date/time in DATE/DATETIME columns.
- **Best Practices**:
  - Always specify column names for clarity and to avoid errors if table structure changes.
  - Use single quotes for string literals (e.g., `'Alice'`).
  - Batch large inserts to avoid performance issues.
- **Common Pitfalls**:
  - Missing NOT NULL values cause errors.
  - Duplicate PRIMARY KEY or UNIQUE values fail.
  - Incorrect data types (e.g., text in INT column) cause errors.
- **SSMS Tools**:
  - View data: Right-click table > Select Top 1000 Rows.
  - Insert via GUI: Right-click table > Edit Top 200 Rows (avoid for learning).

**Practice (45-60 minutes)**:
- **Activity 1: Write INSERT Statements**:
  - In your journal, write `INSERT INTO` statements for:
    - Adding 3 rows to `Inventory.Categories`.
    - Adding 5 rows to `Inventory.Items`.
- **Activity 2: Insert Data in SSMS**:
  - Use `StoreDB` and `Inventory.Categories`:
    ```sql
    INSERT INTO Inventory.Categories (CategoryID, CategoryName, CategoryCode)
    VALUES 
        (1, 'Electronics', 'ELEC'),
        (2, 'Clothing', 'CLTH'),
        (3, 'Books', 'BOOK');
    ```
  - Insert into `Inventory.Items`:
    ```sql
    INSERT INTO Inventory.Items (ItemID, ItemName, StockQuantity, UnitPrice)
    VALUES 
        (1, 'Laptop', 10, 999.99),
        (2, 'T-Shirt', 50, 19.99),
        (3, 'Novel', 30, 12.50);
    ```
  - Verify: `SELECT * FROM Inventory.Categories; SELECT * FROM Inventory.Items;`.
- **Activity 3: Test Constraints**:
  - Try inserting invalid data:
    ```sql
    -- Should fail (duplicate CategoryCode)
    INSERT INTO Inventory.Categories (CategoryID, CategoryName, CategoryCode)
    VALUES (4, 'Furniture', 'ELEC');
    -- Should fail (missing NOT NULL CategoryName)
    INSERT INTO Inventory.Categories (CategoryID, CategoryCode)
    VALUES (5, 'FURN');
    ```
  - Note error messages and resolve (e.g., use unique `CategoryCode`).
- **Activity 4: Mini-Project**:
  - Create a new table in `StoreDB`:
    ```sql
    CREATE TABLE Sales.Orders (
        OrderID INT PRIMARY KEY,
        CustomerID INT NOT NULL,
        OrderDate DATE NOT NULL,
        OrderNumber VARCHAR(20) UNIQUE
    );
    ```
  - Insert 5 rows:
    ```sql
    INSERT INTO Sales.Orders (OrderID, CustomerID, OrderDate, OrderNumber)
    VALUES 
        (1, 1, '2025-09-01', 'ORD001'),
        (2, 2, '2025-09-02', 'ORD002'),
        (3, 1, '2025-09-03', 'ORD003'),
        (4, 3, '2025-09-03', 'ORD004'),
        (5, 2, '2025-09-04', 'ORD005');
    ```
  - Query: `SELECT * FROM Sales.Orders;`.
- **Activity 5: Journal Reflection**:
  - Write answers to:
    - How do PRIMARY KEY and UNIQUE differ?
    - What happens when you violate a NOT NULL constraint?
    - Any errors faced and how you resolved them.

**Resources**:
- Microsoft Docs: “INSERT (Transact-SQL)” and “ALTER TABLE”.
- W3Schools: SQL INSERT INTO tutorial.
- SQLZoo: Interactive INSERT exercises.

---

### Day 3 Deliverables
- **Journal Entries**:
  - Examples of `CREATE TABLE` with constraints for 2 tables.
  - Examples of `ALTER TABLE` (add/modify/drop column, add/drop constraint).
  - Examples of `INSERT INTO` for single and multiple rows.
  - Notes on errors encountered and solutions.
  - Reflection on the mini-project (e.g., why you chose constraints for `Orders`).
- **Practical Output**:
  - Created tables (`Inventory.Categories`, `Inventory.Items`, `Sales.Orders`) with constraints.
  - Modified tables using `ALTER TABLE` (added/dropped columns, constraints).
  - Inserted data into tables and verified with `SELECT`.
  - Completed the `Sales.Orders` mini-project.
- **Self-Assessment**:
  - Can you create a table with PRIMARY KEY, NOT NULL, and UNIQUE constraints?
  - Can you modify a table’s structure without errors?
  - Can you insert data while respecting constraints?
  - Can you explain the purpose of each constraint?

---

### Tips for Success
- **Practice Repetition**: Create and drop multiple tables to build confidence.
- **Use SSMS Effectively**: Use Object Explorer to verify table structures and data.
- **Debug Actively**: Read error messages carefully and search solutions on Microsoft Docs or Stack Overflow.
- **Experiment**: Try creating tables with different constraints or inserting invalid data to understand error handling.
- **Organize Scripts**: Save all SQL commands in a `.sql` file for reference.
- **Community**: Search “SQL Server create table constraints” on X or join a SQL Server forum for tips.

This detailed Day 3 plan ensures you master table creation, constraints, modifications, and data insertion, setting a strong foundation for querying and database design. If you need help with specific errors or more practice scenarios, let me know!
