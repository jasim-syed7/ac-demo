### Detailed Explanation of Day 16: Union and Set Operations

**Objective**: Master the use of set operations (`UNION`, `UNION ALL`, `INTERSECT`, and `EXCEPT`) in Microsoft SQL Server (MSSQL) to combine or compare results from multiple queries. By the end of Day 16, you’ll understand how to use these operations to merge, find commonalities, or identify differences in query results, focusing on combining data from similar or related tables. This day builds on your Days 1-15 skills, particularly `SELECT`, joins, and conditional logic, enabling you to perform advanced data manipulation for real-world scenarios like consolidating reports or comparing datasets.

**Duration**: 4-6 hours (split into theory, hands-on practice, and review). Adjust based on your comfort with SQL Server Management Studio (SSMS) and SQL syntax.

---

### Sub-Syllabus Breakdown
1. **UNION, UNION ALL, INTERSECT, EXCEPT** (1.5-2 hours)
   - Learn the syntax and behavior of `UNION`, `UNION ALL`, `INTERSECT`, and `EXCEPT`.
   - Understand how each operation combines or compares query results.
2. **Combine Results from Multiple Queries** (1.5-2 hours)
   - Apply set operations to merge or compare results from multiple tables or queries.
   - Explore use cases like consolidating data, finding overlaps, or identifying unique records.
3. **Practice with Real-World Scenarios** (1-1.5 hours)
   - Write 10-20 queries using set operations on a sample dataset.
   - Focus on practical applications like merging employee lists or comparing sales data.

---

### Step-by-Step Detailed Plan for Day 16

#### 1. UNION, UNION ALL, INTERSECT, EXCEPT (1.5-2 hours)
**Goal**: Master the syntax and behavior of `UNION`, `UNION ALL`, `INTERSECT`, and `EXCEPT` to combine or compare query results effectively.

**Theory (45-60 minutes)**:
- **What are Set Operations?**
  - Set operations combine the results of two or more `SELECT` queries into a single result set.
  - Operate on rows, treating query results as sets (similar to mathematical set theory).
  - Require queries to have:
    - The same number of columns.
    - Compatible data types for corresponding columns.
    - Column names from the first query in the result set.
  - Four main operations in MSSQL: `UNION`, `UNION ALL`, `INTERSECT`, and `EXCEPT`.
- **UNION**:
  - Combines rows from multiple queries and removes duplicates (distinct rows only).
  - Syntax:
    ```sql
    SELECT Column1, Column2 FROM Table1
    UNION
    SELECT Column1, Column2 FROM Table2;
    ```
  - Example:
    ```sql
    SELECT FirstName, LastName FROM HR.Employees
    UNION
    SELECT CustomerName AS FirstName, '' AS LastName FROM Sales.Customers;
    ```
    - Merges employee and customer names, removing duplicates.
  - Key points:
    - Automatically sorts results to remove duplicates (can be slow for large datasets).
    - Use when you need unique rows from multiple sources.
- **UNION ALL**:
  - Combines rows from multiple queries without removing duplicates.
  - Syntax:
    ```sql
    SELECT Column1, Column2 FROM Table1
    UNION ALL
    SELECT Column1, Column2 FROM Table2;
    ```
  - Example:
    ```sql
    SELECT FirstName, LastName FROM HR.Employees
    UNION ALL
    SELECT CustomerName AS FirstName, '' AS LastName FROM Sales.Customers;
    ```
    - Includes all rows, even duplicates.
  - Key points:
    - Faster than `UNION` because it doesn’t sort or deduplicate.
    - Use when duplicates are acceptable or expected.
- **INTERSECT**:
  - Returns only rows that appear in both query results (common rows).
  - Syntax:
    ```sql
    SELECT Column1, Column2 FROM Table1
    INTERSECT
    SELECT Column1, Column2 FROM Table2;
    ```
  - Example:
    ```sql
    SELECT Region FROM Sales.Customers
    INTERSECT
    SELECT Location FROM HR.Departments;
    ```
    - Returns regions/locations common to both tables.
  - Key points:
    - Removes duplicates (like `UNION`).
    - Useful for finding overlaps (e.g., common values between datasets).
- **EXCEPT**:
  - Returns rows from the first query that don’t appear in the second query.
  - Syntax:
    ```sql
    SELECT Column1, Column2 FROM Table1
    EXCEPT
    SELECT Column1, Column2 FROM Table2;
    ```
  - Example:
    ```sql
    SELECT Location FROM HR.Departments
    EXCEPT
    SELECT Region FROM Sales.Customers;
    ```
    - Returns department locations not found in customer regions.
  - Key points:
    - Removes duplicates.
    - Order matters: `Table1 EXCEPT Table2` ≠ `Table2 EXCEPT Table1`.
- **Key Points**:
  - Column names in the result set come from the first query.
  - Use `ORDER BY` at the end of the last query to sort results (e.g., `ORDER BY Column1`).
  - Combine with `WHERE`, joins, or functions for complex queries.
  - Example with sorting:
    ```sql
    SELECT FirstName FROM HR.Employees
    UNION
    SELECT CustomerName AS FirstName FROM Sales.Customers
    ORDER BY FirstName;
    ```
- **Best Practices**:
  - Ensure compatible column types to avoid errors (e.g., `VARCHAR` with `VARCHAR`).
  - Use `UNION ALL` instead of `UNION` when duplicates are acceptable for better performance.
  - Test queries individually before combining to verify results.
  - Use aliases to align column names across queries.
- **Common Pitfalls**:
  - Mismatched column counts or types cause errors (e.g., “All queries combined using a UNION, INTERSECT or EXCEPT operator must have an equal number of expressions”).
  - Forgetting `ORDER BY` goes at the end of the set operation.
  - Overusing `UNION` when `UNION ALL` is sufficient (impacts performance).
  - Misinterpreting `EXCEPT` order (first query minus second query).
- **SSMS Tools**:
  - View results: Results pane shows combined or filtered rows.
  - Debug errors: Messages pane shows column mismatch or type errors.
  - Test queries: Run individual `SELECT` statements before combining to ensure compatibility.

**Practice (45-60 minutes)**:
- **Activity 1: Write Set Operation Queries**:
  - In your journal, write queries for:
    - Combine employee and customer names with `UNION`.
    - Merge all rows with `UNION ALL`.
    - Find common regions/locations with `INTERSECT`.
    - Identify unique department locations with `EXCEPT`.
  - Example:
    ```sql
    SELECT FirstName, LastName FROM HR.Employees
    UNION
    SELECT CustomerName AS FirstName, '' AS LastName FROM Sales.Customers;
    ```
- **Activity 2: Run Set Operations in SSMS**:
  - Use the `EmployeeDB` from Day 15:
    ```sql
    CREATE DATABASE EmployeeDB;
    USE EmployeeDB;
    CREATE SCHEMA HR;
    CREATE SCHEMA Sales;
    CREATE TABLE HR.Departments (
        DepartmentID INT PRIMARY KEY,
        DepartmentName VARCHAR(50) NOT NULL,
        Location VARCHAR(50)
    );
    INSERT INTO HR.Departments (DepartmentID, DepartmentName, Location)
    VALUES 
        (1, 'IT', 'New York'),
        (2, 'HR', 'Chicago'),
        (3, 'Finance', 'Boston'),
        (4, 'Marketing', 'San Francisco');
    CREATE TABLE HR.Employees (
        EmployeeID INT PRIMARY KEY,
        FirstName VARCHAR(50) NOT NULL,
        LastName VARCHAR(50) NOT NULL,
        Email VARCHAR(100) UNIQUE,
        DepartmentID INT,
        Salary DECIMAL(10,2),
        HireDate DATE DEFAULT GETDATE(),
        ManagerID INT,
        CONSTRAINT FK_Employee_Dept FOREIGN KEY (DepartmentID) REFERENCES HR.Departments(DepartmentID),
        CONSTRAINT FK_Employee_Manager FOREIGN KEY (ManagerID) REFERENCES HR.Employees(EmployeeID)
    );
    INSERT INTO HR.Employees (EmployeeID, FirstName, LastName, Email, DepartmentID, Salary, HireDate, ManagerID)
    VALUES 
        (1, 'Alice', 'Smith', 'alice.smith@company.com', 1, 75000.67, '2023-01-15', 3),
        (2, 'Bob', 'Johnson', 'bob.johnson@company.com', 2, 65000.33, '2023-02-20', 3),
        (3, 'Cathy', 'Lee', 'cathy.lee@company.com', 1, 80000.99, '2023-03-10', NULL),
        (4, 'David', 'Wong', 'david.wong@company.com', 3, 70000.45, '2023-04-05', NULL),
        (5, 'Emma', 'Brown', 'emma.brown@company.com', NULL, 60000.12, '2023-05-01', 4);
    CREATE TABLE Sales.Customers (
        CustomerID INT PRIMARY KEY,
        CustomerName VARCHAR(50) NOT NULL,
        Email VARCHAR(100),
        Region VARCHAR(50)
    );
    INSERT INTO Sales.Customers (CustomerID, CustomerName, Email, Region)
    VALUES 
        (1, 'John Doe', 'john.doe@customer.com', 'East'),
        (2, 'Jane Smith', 'jane.smith@customer.com', 'West'),
        (3, 'Mike Brown', 'mike.brown@customer.com', 'North'),
        (4, 'Lisa Green', 'lisa.green@customer.com', 'San Francisco');
    CREATE TABLE Sales.Orders (
        OrderID INT PRIMARY KEY,
        CustomerID INT NOT NULL,
        OrderDate DATE NOT NULL,
        TotalAmount DECIMAL(10,2),
        Status VARCHAR(20),
        CONSTRAINT FK_Order_Customer FOREIGN KEY (CustomerID) REFERENCES Sales.Customers(CustomerID)
    );
    INSERT INTO Sales.Orders (OrderID, CustomerID, OrderDate, TotalAmount, Status)
    VALUES 
        (1, 1, '2025-08-01', 199.99, 'Completed'),
        (2, 2, '2025-08-02', 49.99, 'Pending'),
        (3, 1, '2025-08-03', 299.99, 'Completed'),
        (4, 3, '2025-08-04', 99.99, 'Cancelled'),
        (5, 2, '2025-08-05', 149.99, 'Completed');
    ```
  - Run:
    ```sql
    -- UNION: Combine employees and customers
    SELECT FirstName, LastName FROM HR.Employees
    UNION
    SELECT CustomerName AS FirstName, '' AS LastName FROM Sales.Customers
    ORDER BY FirstName;
    -- UNION ALL: Combine with duplicates
    SELECT FirstName, LastName FROM HR.Employees
    UNION ALL
    SELECT CustomerName AS FirstName, '' AS LastName FROM Sales.Customers;
    -- INTERSECT: Common regions/locations
    SELECT Location FROM HR.Departments
    INTERSECT
    SELECT Region FROM Sales.Customers;
    -- EXCEPT: Unique department locations
    SELECT Location FROM HR.Departments
    EXCEPT
    SELECT Region FROM Sales.Customers;
    ```
  - Verify: Check Results pane for combined, common, or unique rows (e.g., `INTERSECT` returns ‘San Francisco’).
- **Activity 3: Test with Conditions**:
  - Run:
    ```sql
    SELECT FirstName, LastName FROM HR.Employees WHERE Salary > 70000
    UNION
    SELECT CustomerName AS FirstName, '' AS LastName FROM Sales.Customers WHERE Region = 'East';
    ```
- **Activity 4: Test Errors**:
  - Try: `SELECT FirstName FROM HR.Employees UNION SELECT CustomerName, '' FROM Sales.Customers;` (fails; column count mismatch).
  - Fix: Use `SELECT CustomerName AS FirstName, '' AS LastName`.
  - Try: `SELECT Salary FROM HR.Employees UNION SELECT CustomerName FROM Sales.Customers;` (fails; type mismatch).
  - Fix: Ensure compatible types (e.g., both `VARCHAR`).

**Resources**:
- Microsoft Docs: “Set Operators (Transact-SQL)” (search “SQL Server UNION INTERSECT EXCEPT”).
- W3Schools: SQL UNION tutorial.
- SQLZoo: Interactive set operation exercises.

---

#### 2. Combine Results from Multiple Queries (1.5-2 hours)
**Goal**: Apply `UNION`, `UNION ALL`, `INTERSECT`, and `EXCEPT` to merge or compare results from multiple queries in practical scenarios.

**Theory (30-45 minutes)**:
- **Combining Query Results**:
  - **UNION/UNION ALL**: Merge rows from different tables or queries (e.g., combine employee and customer contact lists).
  - **INTERSECT**: Find common records (e.g., customers and employees in the same region).
  - **EXCEPT**: Identify records unique to one query (e.g., departments not served by customers).
  - Use cases:
    - Consolidate data from similar tables (e.g., sales from multiple regions).
    - Compare datasets (e.g., find employees who are also customers).
    - Generate comprehensive reports (e.g., all contacts in the system).
- **Key Points**:
  - Use `UNION ALL` for performance when duplicates are acceptable.
  - Combine with joins, functions, or conditional logic for complex queries.
  - Example with joins:
    ```sql
    SELECT e.FirstName, d.DepartmentName AS Source
    FROM HR.Employees AS e
    INNER JOIN HR.Departments AS d ON e.DepartmentID = d.DepartmentID
    UNION
    SELECT c.CustomerName AS FirstName, c.Region AS Source
    FROM Sales.Customers AS c;
    ```
  - Use `ORDER BY` only once, at the end of the operation.
- **Best Practices**:
  - Test each `SELECT` query independently to ensure correct results.
  - Use consistent column aliases for clarity.
  - Limit result size with `WHERE` or `TOP` for large datasets.
  - Document the purpose of each set operation in comments.
- **Common Pitfalls**:
  - Inconsistent column types or counts across queries.
  - Large result sets slowing performance (especially with `UNION`).
  - Misinterpreting `INTERSECT` or `EXCEPT` logic (e.g., expecting duplicates).
- **SSMS Tools**:
  - Compare results: Run individual queries to verify before combining.
  - Debug errors: Check Messages pane for column or type mismatches.
  - Row count: Results pane footer shows total rows returned.

**Practice (45-75 minutes)**:
- **Activity 1: Write Combined Queries**:
  - In your journal, write queries to:
    - Merge employee and customer emails with `UNION ALL`.
    - Find common department locations and customer regions with `INTERSECT`.
    - List employees not in a specific department with `EXCEPT`.
  - Example:
    ```sql
    SELECT Email FROM HR.Employees
    UNION ALL
    SELECT Email FROM Sales.Customers;
    ```
- **Activity 2: Run Combined Queries in SSMS**:
  - Run:
    ```sql
    -- UNION ALL: All emails
    SELECT Email, 'Employee' AS Source FROM HR.Employees
    UNION ALL
    SELECT Email, 'Customer' AS Source FROM Sales.Customers;
    -- INTERSECT: Common locations
    SELECT Location FROM HR.Departments
    INTERSECT
    SELECT Region FROM Sales.Customers;
    -- EXCEPT: Unique employee emails
    SELECT Email FROM HR.Employees
    EXCEPT
    SELECT Email FROM Sales.Customers;
    ```
  - Verify: Check Results pane for merged or filtered results.
- **Activity 3: Combine with Joins**:
  - Run:
    ```sql
    SELECT e.FirstName, d.DepartmentName
    FROM HR.Employees AS e
    INNER JOIN HR.Departments AS d ON e.DepartmentID = d.DepartmentID
    UNION
    SELECT c.CustomerName AS FirstName, c.Region
    FROM Sales.Customers AS c;
    ```
- **Activity 4: Test Errors**:
  - Try: `SELECT FirstName, LastName FROM HR.Employees UNION SELECT CustomerName FROM Sales.Customers;` (fails; column count).
  - Fix: Use `SELECT CustomerName AS FirstName, '' AS LastName`.

---

#### 3. Practice with Real-World Scenarios (1-1.5 hours)
**Goal**: Apply set operations in real-world scenarios to merge or compare data, such as consolidating contact lists or analyzing overlaps.

**Practice (1-1.5 hours)**:
- **Step 1: Set Up Sample Data**:
  - Use `EmployeeDB` from Day 15. Add a table for archived employees:
    ```sql
    CREATE TABLE HR.ArchivedEmployees (
        EmployeeID INT PRIMARY KEY,
        FirstName VARCHAR(50) NOT NULL,
        LastName VARCHAR(50) NOT NULL,
        Email VARCHAR(100) UNIQUE,
        DepartmentID INT,
        TerminationDate DATE
    );
    INSERT INTO HR.ArchivedEmployees (EmployeeID, FirstName, LastName, Email, DepartmentID, TerminationDate)
    VALUES 
        (6, 'Frank', 'Davis', 'frank.davis@company.com', 1, '2024-12-31'),
        (7, 'Grace', 'Miller', 'grace.miller@company.com', 2, '2024-11-15'),
        (8, 'Cathy', 'Lee', 'cathy.lee@company.com', 1, '2024-10-01');
    ```
- **Step 2: Write 10-20 Queries for Real Scenarios**:
  - Examples (run each in SSMS and verify):
    1. All employees (current and archived):
       ```sql
       SELECT FirstName, LastName FROM HR.Employees
       UNION
       SELECT FirstName, LastName FROM HR.ArchivedEmployees;
       ```
    2. All emails with source:
       ```sql
       SELECT Email, 'Current Employee' AS Source FROM HR.Employees
       UNION ALL
       SELECT Email, 'Archived Employee' AS Source FROM HR.ArchivedEmployees
       UNION ALL
       SELECT Email, 'Customer' AS Source FROM Sales.Customers;
       ```
    3. Common employee-customer emails:
       ```sql
       SELECT Email FROM HR.Employees
       INTERSECT
       SELECT Email FROM Sales.Customers;
       ```
    4. Current employees not archived:
       ```sql
       SELECT FirstName, LastName FROM HR.Employees
       EXCEPT
       SELECT FirstName, LastName FROM HR.ArchivedEmployees;
       ```
    5. Department-customer regions:
       ```sql
       SELECT Location AS Area FROM HR.Departments
       UNION
       SELECT Region FROM Sales.Customers
       ORDER BY Area;
       ```
    6. Employees in IT or HR:
       ```sql
       SELECT e.FirstName, e.LastName
       FROM HR.Employees AS e
       INNER JOIN HR.Departments AS d ON e.DepartmentID = d.DepartmentID
       WHERE d.DepartmentName = 'IT'
       UNION
       SELECT e.FirstName, e.LastName
       FROM HR.Employees AS e
       INNER JOIN HR.Departments AS d ON e.DepartmentID = d.DepartmentID
       WHERE d.DepartmentName = 'HR';
       ```
    7. All employee names with duplicates:
       ```sql
       SELECT FirstName, LastName FROM HR.Employees
       UNION ALL
       SELECT FirstName, LastName FROM HR.ArchivedEmployees;
       ```
    8. Unique department locations:
       ```sql
       SELECT Location FROM HR.Departments
       EXCEPT
       SELECT Region FROM Sales.Customers;
       ```
    9. Common names in employees and customers:
       ```sql
       SELECT FirstName FROM HR.Employees
       INTERSECT
       SELECT CustomerName AS FirstName FROM Sales.Customers;
       ```
    10. Formatted employee list:
        ```sql
        SELECT CONCAT(FirstName, ' ', LastName) AS FullName
        FROM HR.Employees
        UNION
        SELECT CONCAT(FirstName, ' ', LastName) AS FullName
        FROM HR.ArchivedEmployees
        ORDER BY FullName;
        ```
    11. High-salary employees and high-value customers:
        ```sql
        SELECT e.FirstName AS Name, e.Salary AS Amount
        FROM HR.Employees AS e
        WHERE e.Salary > 70000
        UNION
        SELECT c.CustomerName AS Name, SUM(o.TotalAmount) AS Amount
        FROM Sales.Customers AS c
        INNER JOIN Sales.Orders AS o ON c.CustomerID = o.CustomerID
        GROUP BY c.CustomerName
        HAVING SUM(o.TotalAmount) > 200;
        ```
    12. Active vs. archived employees:
        ```sql
        SELECT FirstName, 'Active' AS Status FROM HR.Employees
        UNION ALL
        SELECT FirstName, 'Archived' AS Status FROM HR.ArchivedEmployees;
        ```
    13. Unique employee emails:
        ```sql
        SELECT Email FROM HR.Employees
        EXCEPT
        SELECT Email FROM HR.ArchivedEmployees;
        ```
    14. Regions with orders:
        ```sql
        SELECT c.Region
        FROM Sales.Customers AS c
        INNER JOIN Sales.Orders AS o ON c.CustomerID = o.CustomerID
        UNION
        SELECT c.Region
        FROM Sales.Customers AS c
        WHERE c.Region = 'South';
        ```
    15. Employee-customer overlap:
        ```sql
        SELECT e.FirstName, e.LastName
        FROM HR.Employees AS e
        INNER JOIN Sales.Customers AS c ON e.FirstName = c.CustomerName;
        ```
    16. All locations with formatting:
        ```sql
        SELECT UPPER(Location) AS Area FROM HR.Departments
        UNION
        SELECT UPPER(Region) AS Area FROM Sales.Customers;
        ```
    17. Employees not in specific regions:
        ```sql
        SELECT e.FirstName, d.Location
        FROM HR.Employees AS e
        INNER JOIN HR.Departments AS d ON e.DepartmentID = d.DepartmentID
        EXCEPT
        SELECT e.FirstName, d.Location
        FROM HR.Employees AS e
        INNER JOIN HR.Departments AS d ON e.DepartmentID = d.DepartmentID
        WHERE d.Location = 'San Francisco';
        ```
    18. Combined order statuses:
        ```sql
        SELECT Status FROM Sales.Orders
        UNION
        SELECT 'Unknown' AS Status;
        ```
    19. Employee tenure report:
        ```sql
        SELECT FirstName, DATEDIFF(year, HireDate, GETDATE()) AS Tenure
        FROM HR.Employees
        UNION
        SELECT FirstName, DATEDIFF
